const eventProps = {
  onCompositionEnd: true,
  onCompositionStart: true,
  onCompositionUpdate: true,
  onCopy: true,
  onCut: true,
  onError: true,
  onBlur: true,
  onFocus: true,
  onChange: true,
  onLoad: true,
  onClick: true,
  onPaste: true,
  onContextMenu: true,
  onScroll: true,
  onDoubleClick: true,
  onWheel: true,
  onDrag: true,
  onDragEnd: true,
  onKeyDown: true,
  onDragEnter: true,
  onKeyPress: true,
  onDragExit: true,
  onKeyUp: true,
  onDragLeave: true,
  onDragOver: true,
  onInput: true,
  onDragStart: true,
  onSubmit: true,
  onDrop: true,
  onMouseDown: true,
  onMouseEnter: true,
  onAnimationStart: true,
  onMouseLeave: true,
  onAnimationEnd: true,
  onMouseMove: true,
  onAnimationIteration: true,
  onMouseOut: true,
  onMouseOver: true,
  onMouseUp: true,
  onSelect: true,
  onTouchCancel: true,
  onTouchEnd: true,
  onTouchMove: true,
  onTouchStart: true,
  onTransitionEnd: true,
}

const htmlAttributes = {
  abbr: 'abbr',
  accept: 'accept',
  acceptCharset: 'accept-charset',
  accessKey: 'accesskey',
  action: 'action',
  allowFullScreen: 'allowfullscreen',
  allowTransparency: 'allowtransparency',
  alt: 'alt',
  async: 'async',
  autoComplete: 'autocomplete',
  autoFocus: 'autofocus',
  autoPlay: 'autoplay',
  cellPadding: 'cellpadding',
  cellSpacing: 'cellspacing',
  challenge: 'challenge',
  charset: 'charset',
  checked: 'checked',
  cite: 'cite',
  class: 'class',
  className: 'class',
  colSpan: 'colspan',
  cols: 'cols',
  command: 'command',
  content: 'content',
  contentEditable: 'contenteditable',
  contextMenu: 'contextmenu',
  controls: 'controls',
  coords: 'coords',
  crossOrigin: 'crossorigin',
  data: 'data',
  dateTime: 'datetime',
  default: 'default',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  download: 'download',
  draggable: 'draggable',
  dropzone: 'dropzone',
  encType: 'enctype',
  for: 'for',
  form: 'form',
  formAction: 'formaction',
  formEncType: 'formenctype',
  formMethod: 'formmethod',
  formNoValidate: 'formnovalidate',
  formTarget: 'formtarget',
  frameBorder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hrefLang: 'hreflang',
  htmlFor: 'for',
  httpEquiv: 'http-equiv',
  icon: 'icon',
  id: 'id',
  inputMode: 'inputmode',
  isMap: 'ismap',
  itemId: 'itemid',
  itemProp: 'itemprop',
  itemRef: 'itemref',
  itemScope: 'itemscope',
  itemType: 'itemtype',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  manifest: 'manifest',
  max: 'max',
  maxLength: 'maxlength',
  media: 'media',
  mediaGroup: 'mediagroup',
  method: 'method',
  min: 'min',
  minLength: 'minlength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  noValidate: 'novalidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  ping: 'ping',
  placeholder: 'placeholder',
  poster: 'poster',
  preload: 'preload',
  radioGroup: 'radiogroup',
  readOnly: 'readonly',
  rel: 'rel',
  required: 'required',
  role: 'role',
  rowSpan: 'rowspan',
  rows: 'rows',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  sortable: 'sortable',
  span: 'span',
  spellCheck: 'spellcheck',
  src: 'src',
  srcDoc: 'srcdoc',
  srcSet: 'srcset',
  start: 'start',
  step: 'step',
  style: 'style',
  tabIndex: 'tabindex',
  target: 'target',
  title: 'title',
  translate: 'translate',
  type: 'type',
  typeMustMatch: 'typemustmatch',
  useMap: 'usemap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',
}

/**
 * Function to check if a prop is a valid DOM attribute.
 */
export const isValidDOMProp = (prop: string) =>
  eventProps[prop as keyof typeof eventProps] ||
  htmlAttributes[prop as keyof typeof htmlAttributes] ||
  /^(data|aria)-/.test(prop)

/**
 * Function to filter out props that are not valid DOM attributes.
 */
export default <T extends Record<string, any>>(props: T): T => {
  const domProps = {} as T
  for (const prop in props) {
    if (Object.prototype.hasOwnProperty.call(props, prop) && isValidDOMProp(prop)) {
      domProps[prop] = props[prop]
    }
  }
  return domProps
}
